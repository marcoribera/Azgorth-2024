use cfgfile;
use uo;
use os;
use datafile;
use vitals;
use math;

include ":attributes:attributes";
include ":timedscripts:timedScripts";
include ":charactercreation:feats";
include "include/say";
include ":tn:tngumps";
include ":tn:cooldown";
include "include/string";

var the_cfg_fix := ReadConfigFile(":fls_core:item_fix");

var selector_open := 0;


program virtueachievements(params)

   var who := params[1];
   var cfg:=ReadConfigFile(":combat:itemdesc");
   var elem := FindConfigElem(cfg, who.weapon.objtype);

   var nomehabUm := GetConfigString(elem, "specialmove1");
   var nomeHabUmSplit := SplitWords(nomehabUm, "/", -1 );
   var nomeHabUmFinal := UCFirst(nomeHabUmSplit[2]);

   var nomehabDois := GetConfigString(elem, "specialmove2");
   var nomeHabDoisSplit := SplitWords(nomehabDois, "/", -1 );
   var nomeHabDoisFinal := UCFirst(nomeHabDoisSplit[2]);

   if (GetObjPRoperty(who, "metamorfose") != error)
      nomehabUm := GetObjProperty(who, "habilidadeum");
      nomeHabUmSplit := SplitWords(nomehabUm, "/", -1 );
      nomeHabUmFinal := UCFirst(nomeHabUmSplit[2]);

      nomehabDois := GetObjProperty(who, "habilidadedois");
      nomeHabDoisSplit := SplitWords(nomehabDois, "/", -1 );
      nomeHabDoisFinal := UCFirst(nomeHabDoisSplit[2]);

   endif

   if (!elem || !nomehabUm || !nomehabDois)
      nomehabUmFinal := "Nada";
      nomeHabDoisFinal := "Nada";
   endif

	CloseGump( who, 0x945, 978455);
   _checkPid(who, "hotbar");
   if (!GetObjProperty(who, "chardata")) return; endif 
   
   var hotbar := GetObjProperty(who, "hotbar");
   if (!hotbar) 
      hotbar := struct{ shortcuts := array{}, pos_x := 105, pos_y := 543 }; 
      SetobjProperty(who, "hotbar", hotbar);
   endif

   while (who.connected)
      var res := BuildHotBar(who, hotbar, nomeHabUmFinal, nomeHabDoisFinal);

      if (res[0] == 978455)
         return;
      elseif (res[0] >= 900 && res[0] < 1500)
         hotbar.shortcuts[selector_open] := struct{ id := res[0] - 900};
         selector_open := 0;
         SetobjProperty(who, "hotbar", hotbar);

      elseif (res[0] >= 893)
         if (res[0] == 897)
            hotbar.shortcuts[selector_open] := struct{ script := ":combat:esquiva", Icon := 2248/*, cooldown := "dodge_block" */};
            SetobjProperty(who, "hotbar", hotbar);
            selector_open := 0;
         elseif (res[0] == 895)
            var shortcut_obj := struct{ equips := array{}, name := "Equip" };
            SendSysMessageEx(who, "Qual itens deseja equipar com este atalho? (esc para parar)", SSM_REQUEST);
            while (who.connected)
               sleepms(5);
               var item := Target(who);
               if (!item) break; endif

               if (!item.tile_layer || !item.movable || item in shortcut_obj.equips)
                  SendSysMessageEx(who, "Voce nao pode selecionar este item ou ele nao e equipavel.", SSM_REQUEST);
                  continue;
               endif 
               SendSysMessageEx(who, "Item selecionado: {}".format(item.name), SSM_INFO);
               shortcut_obj.equips.append(item.serial);
               if (shortcut_obj.equips.size() >= 5) break; endif
            endwhile
            
            while (who.connected)
               var text := GetInput(who, who.backpack, "Escreva um nome de ate 4 caracteres para o atalho. (esc para usar nome padrao)");
               if (!text) break; endif
               
               if (len(text) > 5)
                  continue;
               endif
               shortcut_obj.name := text;
               break;
            endwhile

            hotbar.shortcuts[selector_open] := shortcut_obj;
            selector_open := 0;
            SetobjProperty(who, "hotbar", hotbar);
         elseif(res[0] == 896)
            hotbar.shortcuts[selector_open] := struct{ script := ":combat:habilidadeum", Icon := 2255};
            selector_open := 0;
           // hotbar.shortcuts[selector_open] := struct{ /*script := ":combat:useScripts/shield"*/, Icon := 0x9BA5 /*, cooldown := "dodge_block"*/ };
            SetobjProperty(who, "hotbar", hotbar);
         elseif(res[0] == 894)
            hotbar.shortcuts[selector_open] := struct{ script := ":combat:habilidadedois", Icon := 2256};
            selector_open := 0;
            SetobjProperty(who, "hotbar", hotbar);
         elseif (res[0] == 898)
            SendSysMessageEx(who, "Qual item deseja adicionar a barra de atalho?", SSM_REQUEST);
            var item := Target(who);
            if (item)
               var itemcfg := ReadConfigFile( ":*:itemdesc" );
               var elem := FindConfigElem( itemcfg, item.objtype );
               if (!elem.Script)
                  SendSysMessageEx(who, "Este item nao e consumivel ou ativavel.", SSM_FAIL);
               else
                  hotbar.shortcuts[selector_open] := struct{
                     item := item.serial,
                     objtype := item.objtype,
                     graphic := item.graphic,
                     desc := item.desc,
                     color := item.color,
                     cooldown := elem.cooldown
                  };
                  SetobjProperty(who, "hotbar", hotbar);
               endif
               selector_open := 0;
            endif
         elseif (res[0] == 899)
            var shab := CreateGumpHabilidade(who);
            hotbar.shortcuts[selector_open] := struct{
               shab := shab,
               Icon := 2286
            };
            SetobjProperty(who, "hotbar", hotbar);
            selector_open := 0;
         elseif (res[0] == 893)
            hotbar.shortcuts[selector_open] := 0;
            SetobjProperty(who, "hotbar", hotbar);
            selector_open := 0;
         endif
      elseif (res[0] >= 50 && res[0] <= 70)
         res := res[0] - 50;
         if (selector_open != res)
            selector_open := res;
         else
            selector_open := 0;
         endif
      elseif(res[0] >= 450 && res[0] <= 500)
         start_script(":charactercreation:commands/player/atalho", array{who, res[0]-450});
      elseif (res[0] == 2)
         var new_pos := PositionGump(who, hotbar.pos_x, hotbar.pos_y);
         hotbar.pos_x := new_pos[1];
         hotbar.pos_y := new_pos[2];
         SetobjProperty(who, "hotbar", hotbar);
      endif

      sleepms(25);
      hotbar := GetObjProperty(who, "hotbar");
   endwhile


endprogram

function BuildSelectorGump(who, byref gump, raw_x, raw_y)
   var feat_list := GetFeatList(who, RETURN_ACTIVE_ONLY);
   if (!feat_list) return; endif
   
   var width := 60+(48*(feat_list.size()+6));
   if (selector_open > 1)
      raw_x += (50 * (selector_open-1));
   endif
	GFResizePic(gump, raw_x+22, raw_y+8, 9200, width, 53); //background

   var pos_x := raw_x+31;
   foreach feat in feat_list
	   GFAddButton(gump, pos_x, raw_y+13, feat.Icon, feat.Icon, GF_CLOSE_BTN, 900+feat.FeatID);
      GFTooltipText(gump, "<center><basefont color=#7FFFD4>{}</basefont></center>".format(feat.Name));
      pos_x += 48;
      sleepms(2);
   endforeach

	GFAddButton(gump, pos_x, raw_y+13, 2248, 2248, GF_CLOSE_BTN, 897);
   GFTooltipText(gump, "<center><basefont color=#7FFFD4>Esquiva</basefont></center>Ativa sua acao de esquiva, permitindo esquivar de golpes e habilidades por 2 segundos.");

	GFAddButton(gump, pos_x+48, raw_y+13, 0x9BA5, 0x9BA5, GF_CLOSE_BTN, 896);
   GFTooltipText(gump, "<center><basefont color=#7FFFD4>Habilidade 1</basefont></center>Ativa a primeira habilidade da sua arma");

   GFAddButton(gump, pos_x+96, raw_y+13, 0x9BA5, 0x9BA5, GF_CLOSE_BTN, 894);
   GFTooltipText(gump, "<center><basefont color=#7FFFD4>Habilidade 2</basefont></center>Ativa a segunda habilidade da sua arma");

	GFAddButton(gump, pos_x+96+48, raw_y+13, 39833, 39833, GF_CLOSE_BTN, 895);
	GFGumpPic(gump, pos_x+96+2, raw_y+19, 27, 1485);
   GFTooltipText(gump, "<center><basefont color=#7FFFD4>Atalho de Item</basefont></center>Selecione um ou mais itens para auto-equipar");
	GFTextLine(gump, pos_x+96+56, raw_y+24, 1152, "Equip");

	GFAddButton(gump, pos_x+96+96, raw_y+13, 39833, 39833, GF_CLOSE_BTN, 898);
	GFGumpPic(gump, pos_x+96+2+48, raw_y+19, 27, 1485);
   GFTooltipText(gump, "<center><basefont color=#7FFFD4>Atalho de Item</basefont></center>Selecione um item ou consumivel para adicionar a barra de atalho");
	GFTextLine(gump, pos_x+96+106, raw_y+24, 1152, "Item");

	GFAddButton(gump, pos_x+144+96, raw_y+13, 21280, 21280, GF_CLOSE_BTN, 899);
	GFGumpPic(gump, pos_x+96+96, raw_y+13, 21280, 1485);
   GFTooltipText(gump, "<center><basefont color=#7FFFD4>Adicionar habilidade</basefont></center>Selecione uma habilidade ativa de sua classe");

   GFAddButton(gump, pos_x+144+96+48, raw_y+13, 21012, 21012, GF_CLOSE_BTN, 893);
	GFGumpPic(gump, pos_x+96+96+48, raw_y+13, 21012, 1485);
   GFTooltipText(gump, "<center><basefont color=#7FFFD4>Limpar atalho</basefont></center>");
endfunction

function BuildHotBar(who, byref hotbar, nomehabUmFinal, nomeHabDoisFinal)
   var pos_x := hotbar.pos_x;
   var pos_y := hotbar.pos_y - 50;
	var gump := GFCreateGump(0, 0);

   GFMovable(gump, 0);//9260
   GFDisposable(gump, 0);
   GFClosable(gump, 0);
   GFSetID(gump, 0x945);//9260
	GFResizePic(gump, pos_x+10, pos_y+64, 9200, 597, 74);

   var i;
   for (i := 1; i <= 12; i += 1)
      var pos_plus := pos_x+((i-1) * 48);
      var shortcut := hotbar.shortcuts[i];
	   if (selector_open != i) GFAddButton(gump, 34 + pos_plus, pos_y+65, 2086, 2086, GF_CLOSE_BTN, 50 + i);
	   else GFAddButton(gump, 34 + pos_plus, pos_y+65, 2087, 2087, GF_CLOSE_BTN, 50 + i); endif

      var z := "0";
      if (i >= 10) z := ""; endif
	   GFTextLine(gump, 32 + pos_plus, pos_y+121, 1152, "{}{}".format(z, i));

      if (!shortcut)
	         GFGumpPic(gump, 19 + pos_plus, pos_y+81, 21012, 1485);
      elseif (shortcut.script == ":combat:esquiva")
        /* if (who.squelched || who.paralyzed || who.frozen)*/
            GFGumpPic(gump, 19 + pos_plus, pos_y+81, shortcut.Icon, 1000);
            GFGumpPic(gump, 22 + pos_plus, pos_y+85, 0x20, 1000);
	         // GFTextLine(gump, 19 + pos_plus+12, pos_y+81+14, 40, "BLOCK");
         if(TS_GetCooldown(who, "esquiva"))
            GFGumpPic(gump, 19 + pos_plus, pos_y+81, shortcut.Icon, 1000);
	         GFTextLine(gump, 19 + pos_plus+12, pos_y+81+14, 40, "CD");
         else
            GFAddButton(gump, 19 + pos_plus, pos_y+81, shortcut.Icon, shortcut.Icon, GF_CLOSE_BTN, 450+i);
            GFTooltipText(gump, "<center><basefont color=#7FFFD4>Esquiva</basefont></center>");
         endif
      elseif (shortcut.script == ":combat:habilidadeum")
        /* if (who.squelched || who.paralyzed || who.frozen)*/
            GFGumpPic(gump, 19 + pos_plus, pos_y+81, shortcut.Icon, 1000);
            GFGumpPic(gump, 22 + pos_plus, pos_y+85, 0x20, 1000);
	         // GFTextLine(gump, 19 + pos_plus+12, pos_y+81+14, 40, "BLOCK");
         if(TS_GetCooldown(who, "habilidade um") != error)
            GFGumpPic(gump, 19 + pos_plus, pos_y+81, shortcut.Icon, 1000);
	         GFTextLine(gump, 19 + pos_plus+12, pos_y+81+14, 40, "CD");
         else
            GFAddButton(gump, 19 + pos_plus, pos_y+81, shortcut.Icon, shortcut.Icon, GF_CLOSE_BTN, 450+i);
            GFTooltipText(gump, "<center><basefont color=#7FFFD4>" + nomeHabUmFinal + "</basefont></center>Habilidade Um");
         endif
      elseif (shortcut.script == ":combat:habilidadedois")
        /* if (who.squelched || who.paralyzed || who.frozen)*/
            GFGumpPic(gump, 19 + pos_plus, pos_y+81, shortcut.Icon, 1000);
            GFGumpPic(gump, 22 + pos_plus, pos_y+85, 0x20, 1000);
	         // GFTextLine(gump, 19 + pos_plus+12, pos_y+81+14, 40, "BLOCK");
         if(TS_GetCooldown(who, "habilidade dois") != error)
            GFGumpPic(gump, 19 + pos_plus, pos_y+81, shortcut.Icon, 1000);
	         GFTextLine(gump, 19 + pos_plus+12, pos_y+81+14, 40, "CD");
         else
            GFAddButton(gump, 19 + pos_plus, pos_y+81, shortcut.Icon, shortcut.Icon, GF_CLOSE_BTN, 450+i);
            GFTooltipText(gump, "<center><basefont color=#7FFFD4>" + nomeHabDoisFinal + "</basefont></center>Habilidade Dois");

         endif
      elseif (shortcut.equips)
         GFAddButton(gump, 19 + pos_plus, pos_y+81, 39833, 39833, GF_CLOSE_BTN, 450+i);
         GFGumpPic(gump, 19 + pos_plus+2, pos_y+85, 27, 1485);
	      GFTextLine(gump, 19+pos_plus+4, pos_y+85+5, 1152, ""+shortcut.name);
         GFTooltipText(gump, "<basefont color=#7FFFD4>Macro de Equipar Itens</basefont>");
      elseif (shortcut.item)
         var cd := 0;
         var color := shortcut.color;
         if (shortcut.cooldown && TS_GetCooldown(who, "{}".format(shortcut.cooldown)))
            cd := 1;
            color := 1000;
         else
            GFAddButton(gump, 19 + pos_plus, pos_y+81, 39833, 39833, GF_CLOSE_BTN, 450+i);
         endif
         var fix_p := GetItemFix(the_cfg_fix, shortcut.graphic);
         GFGumpPic(gump, 19 + pos_plus+2, pos_y+85, 27, 1485);
         GFTilePic(gump, 19 + pos_plus+fix_p.x, pos_y+87+fix_p.y, cint(shortcut.graphic), color);
         if (cd)
            GFTextLine(gump, 19 + pos_plus+12, pos_y+81+14, 40, "CD");
         endif
         GFTooltipText(gump, "<basefont color=#7FFFD4>{}</basefont>".format(shortcut.desc));
      elseif (shortcut.id)
         var feat := GetFeatById(shortcut.id);
         if (TS_GetCooldown(who, "hab_block"))
            GFGumpPic(gump, 19 + pos_plus, pos_y+81, feat.Icon, 1000);
            GFGumpPic(gump, 22 + pos_plus, pos_y+85, 0x20, 1000);
         elseif (TS_GetCooldown(who, "hab_{}".format(shortcut.id)))
            GFGumpPic(gump, 19 + pos_plus, pos_y+81, feat.Icon, 1000);
	         GFTextLine(gump, 19 + pos_plus+12, pos_y+81+14, 40, "CD");
         else
            GFAddButton(gump, 19 + pos_plus, pos_y+81, feat.Icon, feat.Icon, GF_CLOSE_BTN, 450+i);
         endif
         GFTooltipText(gump, "<center><basefont color=#7FFFD4>{}</basefont></center>{}".format(feat.Name, feat.Description));
      elseif(shortcut.shab)
            GFAddButton(gump, 19 + pos_plus, pos_y+81, 39833, 39833, GF_CLOSE_BTN, 450+i);
            GFTooltipText(gump, "<center><basefont color=#7FFFD4>" + shortcut.shab + "</basefont></center>");   

            GFGumpPic(gump, 22 + pos_plus, pos_y+85, 0x20, 1000);

            //Pega as iniciais do nome da hab
            var arrayAtalho := SplitWords( shortcut.shab, delimiter := " ");
            var atalhoFinal := "";

            foreach word in arrayAtalho
               var atalhoToAscii := CAsc( word ); 
               var asciitoAtalho := CChr( atalhoToAscii );
               atalhoFinal := upper(atalhoFinal + asciitoAtalho);
            endforeach
            
            // GFTextLine(gump, 19 + pos_plus+12, pos_y+81+14, 40, "CD");

            if(!TS_GetCooldown(who, lower(shortcut.shab)))
               GFGumpPic(gump, 19 + pos_plus, pos_y+81, 2286, 1000);
               GFTextLine(gump, 19 + pos_plus+12, pos_y+81+14, 40, atalhoFInal);
            else
               GFGumpPic(gump, 19 + pos_plus, pos_y+81, 2283, 1000);
               GFTextLine(gump, 19 + pos_plus+12, pos_y+81+14, 40, "CD");
            endif

      endif
      sleepms(2);
   endfor

	GFAddButton(gump, pos_x+14, pos_y+67, 2103, 2103, GF_CLOSE_BTN, 2); // resize

   if (selector_open) BuildSelectorGump(who, gump, pos_x, pos_y); endif

	return GFSendGump(who, gump);
endfunction
/*
function GetInput(character, item, uc_prompt, langcode := "ENG") // item is a placeholder, pass anything
      var request := RequestInputUC(character, item, UC(uc_prompt), langcode);
      if (!request) return; endif

      return CChrZ(request.uc_text);
endfunction

function FindElemInArray(byref the_array, find_what)
    if ( Lower(TypeOf(the_array)) != "array" )
        return error{"errortext":="Object passed was not an array."};
    endif

    foreach index in ( the_array )
        if ((TypeOf(find_what) == "Struct" || TypeOf(index) == "Struct") || (TypeOf(index) == "Dictionary" || TypeOf(find_what) == "Dictionary") || index.isA(POLCLASS_ITEM))
            var can_return := array{};
            foreach key in (find_what.Keys())
                if ((index.Exists(key) && find_what[key] == index[key]) || index.get_member(key) == find_what[key])
                    can_return.append(1);
                else
                    can_return.append(2);
                endif
                sleepms(2);
            endforeach

            if (!(2 in can_return))
                return index;
            endif
        elseif ( index == find_what )
			return index;
		endif
        sleepms(2);
    endforeach

    return 0;
endfunction

*/

function ProccessHab(who, hab)
	hab := lower(hab);
	var habcfg := ReadConfigFile(":charactercreation:config/habilidades");
	var habelem := FindConfigElem(habcfg, hab);

	if (!habelem)
		SendSysMessageEx(who, "Habilidade nao encontrada.", SSM_FAIL);
		return;
	endif

	var uso := GetConfigString(habelem, "uso");

	if (uso != "Ativa")
		SendSysMEssageEx(who, "Esta habilidade nao pode ser ativada.");
		return;
	endif


//	sendsysmessage(who, " " + TS_GetCooldown(who, hab) );
	if ( TS_GetCooldown(who, hab) != error && who.cmdlevel < 3)
		SendSysMEssageEx(who, "Voce nao pode usar essa habilidade agora.", SSM_FAIL);
		return 1;
	endif
	
	var stam := cint(GetConfigInt(habelem, "stam"));
	if (stam != error)
		if (!AP_ConsumeVital(who, STAMINA, stam))
			SendSysMessageEx(who, "Voce esta muito cansado para usar esta habilidade.", SSM_FAIL);
			return 1;
		endif
	endif

	var mana := cint(GetConfigInt(habelem, "mana"));
	if (mana != error)
		if (!AP_ConsumeVital(who, MANA, mana))
			SendSysMessageEx(who, "Voce esta muito cansado para usar esta habilidade.", SSM_FAIL);
			return 1;
		endif
	endif

    var script := GetConfigString(habelem, "script");
	var duracao := GetConfigString(habelem, "duracao");

	var delay := Cint(GetConfigInt(habelem, "delay"));

	var mimic := 0;
	if (GetObjProperty(who, "#mimico"))
		mimic := SystemFindObjectBySerial(GetObjProperty(who, "#mimico"));
		if (mimic && (Distance(mimic, who) < 12))
			PrintText(mimic, "*copia a habilidade " + hab);
		endif
		EraseObjProperty(who, "#mimico");
	endif

	if (duracao == "1 ataque")
		if (!script)
			SendSysMessageEx(who, "Nao foi encontrado o script da habilidade: " + hab, SSM_FAIL);
			return;
		endif
		SendSysMessageEx(who, "Se voce acertar o proximo ataque, vai executar o movimento: " + hab, SSM_INFO);
		SetObjProperty(who, "movement",  script);
		SetObjProperty(who, "#movtime", ReadGameClock());
		if (mimic)
			SendSysMessageEx(mimic, "Se voce acertar o proximo ataque, vai executar o movimento: " + hab, SSM_INFO);
			SetObjProperty(mimic, "movement",  script);
			SetObjProperty(mimic, "#movtime", ReadGameClock());
		endif
	else
		var e := start_script(script, who );
		if (mimic)
			start_script(script, mimic );
		endif
		//sendsysmessage(who, " " + e );
	endif
	
	TS_StartCooldown(who, hab, delay);

endfunction


function CreateGumpHabilidade(who)

	UnloadConfigFile(":charactercreation:config/habilidades");

	var gump := GFCreateGump();

   GFDisposable(gump, 0);
	GFResizePic(gump, 0, 25, 3600, 380, 650);	
	GFResizePic(gump, 15, 40, 0x13BE, 350, 620);
	GFTextMid(gump, 80, 50, 250, 1153, "Habilidades de Classe");

	var habilidades := GetObjPRoperty(who, "myhabs");
	if (!habilidades)
		habilidades := dictionary;
	endif
	
	var habsAtivas := GetObjPRoperty(who, "habsAtivas");
	if (!habsAtivas)
		habsAtivas := array;
	endif
	

	var habcfg := ReadConfigFile(":charactercreation:config/habilidades");

	// var habElems := habilidades.keys();

	
	var x := 40;
	var y := 80;
	var i := 0;

	foreach hab in habilidades
			
			var habelem := FindConfigElem(habcfg, hab);
			var desc := getConfigString(habelem, "desc");
			var uso := GetConfigString(habelem, "uso");
			var nome := GetConfigString(habelem, "nome");
			var script := GetConfigString(habelem, "script");


	
			if (uso != "Passiva")
				i := i + 1;
				habsAtivas.append(nome);
				SetObjProperty(who, "HabsAtivas", habsAtivas);
				GFAddButton(gump, 20, y+5, 2103, 2104, 1, i);	
				GFTextLine(gump, x, y, 1153, nome + " [" + uso + "]" );
				GFHTMLArea( gump, x, y+20, 300, 60, desc, 1150, 1);
				y := y + 80;
			endif

	endforeach
	
	var input := GFSendGump(who, gump);
	input := input[0];

	if (input > 0)
		for(i := 1; i <= 20 ; i := i + 1)
			if (input == i)
            var myArray := GetObjProperty(who, "HabsAtivas");
            return myArray[i];
			endif
		endfor
	endif
	

endfunction 